import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session
# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load
​
import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
​
# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory
​
import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))
​
# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session
add Codeadd Markdown
Importing python libraries for handling data set.

add Codeadd Markdown
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pylab as plt
%matplotlib inline
from mpl_toolkits import mplot3d
​
add Codeadd Markdown
Type Markdown and LaTeX:  α2 
add Codeadd Markdown
Import Logistic Model libararies from SKlearn

add Codeadd Markdown
from sklearn.preprocessing import LabelEncoder ##Categorical  data ito numerical data.
from sklearn.model_selection import train_test_split ## For splitting the data set .
from sklearn.linear_model import LogisticRegression ## performing logistic regression.
from sklearn.metrics import classification_report,confusion_matrix,plot_confusion_matrix
add Codeadd Markdown
DATA PREPARATION we are loading data, cleaning data eleminating null values .

add Codeadd Markdown
iris=pd.read_csv('../input/iris-flower-dataset/IRIS.csv')
iris.head()
​
sepal_length	sepal_width	petal_length	petal_width	species
0	5.1	3.5	1.4	0.2	Iris-setosa
1	4.9	3.0	1.4	0.2	Iris-setosa
2	4.7	3.2	1.3	0.2	Iris-setosa
3	4.6	3.1	1.5	0.2	Iris-setosa
4	5.0	3.6	1.4	0.2	Iris-setosa
add Codeadd Markdown
iris.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 150 entries, 0 to 149
Data columns (total 5 columns):
 #   Column        Non-Null Count  Dtype  
---  ------        --------------  -----  
 0   sepal_length  150 non-null    float64
 1   sepal_width   150 non-null    float64
 2   petal_length  150 non-null    float64
 3   petal_width   150 non-null    float64
 4   species       150 non-null    object 
dtypes: float64(4), object(1)
memory usage: 6.0+ KB
add Codeadd Markdown
iris.isnull().sum()
sepal_length    0
sepal_width     0
petal_length    0
petal_width     0
species         0
dtype: int64
add Codeadd Markdown
iris.describe().T
count	mean	std	min	25%	50%	75%	max
sepal_length	150.0	5.843333	0.828066	4.3	5.1	5.80	6.4	7.9
sepal_width	150.0	3.054000	0.433594	2.0	2.8	3.00	3.3	4.4
petal_length	150.0	3.758667	1.764420	1.0	1.6	4.35	5.1	6.9
petal_width	150.0	1.198667	0.763161	0.1	0.3	1.30	1.8	2.5
add Codeadd Markdown
plt.hist(iris['sepal_length'],bins=20,color="green")
plt.xlabel("Sepal Length")
plt.ylabel("Count")
plt.title("Sepal Length")
plt.show()
plt.hist(iris['sepal_length'],bins=20,color="green")
plt.xlabel("Sepal Length")
plt.ylabel("Count")
plt.title("Sepal Length")
plt.show()
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
/tmp/ipykernel_33/2371570430.py in <module>
      2 plt.xlabel("Sepal Length")
      3 plt.ylabel("Count")
----> 4 plt.title("Sepal Length")
      5 plt.show()

TypeError: 'str' object is not callable

add Codeadd Markdown
plt.hist(iris['sepal_width'],bins=20,color="red")
plt.xlabel("Sepal Width")
plt.ylabel("Count")
plt.title("Sepal Width")
plt.show()
plt.hist(iris['sepal_width'],bins=20,color="red")
plt.xlabel("Sepal Width")
plt.ylabel("Count")
plt.title("Sepal Width")
plt.show()
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
/tmp/ipykernel_33/4200908786.py in <module>
      2 plt.xlabel("Sepal Width")
      3 plt.ylabel("Count")
----> 4 plt.title("Sepal Width")
      5 plt.show()

TypeError: 'str' object is not callable

add Codeadd Markdown
plt.hist(iris['petal_width'],bins=20,color="yellow")
plt.xlabel("Petal Width")
plt.ylabel("Count")
plt.title("Petal Width")
plt.show()
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
/tmp/ipykernel_33/2071638920.py in <module>
      2 plt.xlabel("Petal Width")
      3 plt.ylabel("Count")
----> 4 plt.title("Petal Width")
      5 plt.show()

TypeError: 'str' object is not callable

add Codeadd Markdown
blue
plt.hist(iris['petal_length'],bins=20,color="blue")
plt.xlabel("Petal Length")
plt.ylabel("Count")
plt.title("Petal Length")
plt.show()
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
/tmp/ipykernel_33/2708068411.py in <module>
      2 plt.xlabel("Petal Length")
      3 plt.ylabel("Count")
----> 4 plt.title("Petal Length")
      5 plt.show()

TypeError: 'str' object is not callable

add Codeadd Markdown
iris1=iris[['sepal_length','sepal_width','petal_length','petal_width']]
iris1.boxplot()
<AxesSubplot:>

add Codeadd Markdown
sns.catplot(x='species',y='petal_length',hue='species',data=iris)
sns.catplot(x='species',y='petal_length',hue='species',data=iris)
<seaborn.axisgrid.FacetGrid at 0x7f978ce0e150>

add Codeadd Markdown
width
sns.catplot(x='species',y='petal_width',hue='species',data=iris)
<seaborn.axisgrid.FacetGrid at 0x7f978d1b7190>

add Codeadd Markdown
sepal
sns.catplot(x='species',y='sepal_length',hue='species',data=iris)
<seaborn.axisgrid.FacetGrid at 0x7f978d1b72d0>

add Codeadd Markdown
sepal_width
sns.catplot(x='species',y='sepal_width',hue='species',data=iris)
<seaborn.axisgrid.FacetGrid at 0x7f978d817e90>

add Codeadd Markdown
​
add Codeadd Markdown
sns.pairplot(iris,hue='species')
plt.show()

add Codeadd Markdown
Outcome of analyis average sepal length and width is 5.84 and 3.05 average petal length and width is 3.75 and 1.19

add Codeadd Markdown
sns.heatmap(iris.corr(),annot=True)
<AxesSubplot:>

add Codeadd Markdown
Type Markdown and LaTeX:  α2 
add Codeadd Markdown
encoder=LabelEncoder()
iris['species']=encoder.fit_transform(iris['species'])
iris.head()
sepal_length	sepal_width	petal_length	petal_width	species
0	5.1	3.5	1.4	0.2	0
1	4.9	3.0	1.4	0.2	0
2	4.7	3.2	1.3	0.2	0
3	4.6	3.1	1.5	0.2	0
4	5.0	3.6	1.4	0.2	0
add Codeadd Markdown
X=iris.drop('species',axis=1)
y=iris['species']
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3)
print("X_train shape: ",X_train.shape)
print("X_test shape: ",X_test.shape)
print("y_train shape: ",y_train.shape)
print("y_test shape: ",y_test.shape)
X_train shape:  (105, 4)
X_test shape:  (45, 4)
y_train shape:  (105,)
y_test shape:  (45,)
add Codeadd Markdown
LR_regg=LogisticRegression(solver='liblinear').fit(X_train,y_train)
y_pred_LR=LR_regg.predict(X_test)
y_pred_LR
​
​
array([0, 0, 1, 1, 1, 2, 0, 2, 1, 0, 1, 2, 2, 2, 1, 0, 2, 0, 0, 2, 0, 0,
       1, 2, 2, 0, 2, 0, 2, 1, 2, 2, 2, 1, 1, 2, 2, 1, 2, 2, 1, 1, 2, 0,
       2])
add Codeadd Markdown
rep_LR=classification_report(y_test,y_pred_LR)
print(rep_LR)
              precision    recall  f1-score   support

           0       1.00      1.00      1.00        12
           1       1.00      0.81      0.90        16
           2       0.85      1.00      0.92        17

    accuracy                           0.93        45
   macro avg       0.95      0.94      0.94        45
weighted avg       0.94      0.93      0.93        45

add Codeadd Markdown
LR_regg
plot_confusion_matrix(LR_regg,X_test,y_test)
plt.show()
